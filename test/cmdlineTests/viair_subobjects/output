
======= viair_subobjects/input.sol:C =======
Binary:
60806040523415600e57600080fd5b600980601c600039806000f3fe6080604052600080fd
Binary of the runtime part:

Optimized IR:
/*******************************************************
 *                       WARNING                       *
 *  Solidity to Yul compilation is still EXPERIMENTAL  *
 *       It can result in LOSS OF FUNDS or worse       *
 *                !USE AT YOUR OWN RISK!               *
 *******************************************************/

object "C_3" {
    code {
        {
            mstore(64, 128)
            if callvalue() { revert(0, 0) }
            let _1 := datasize("C_3_deployed")
            codecopy(0, dataoffset("C_3_deployed"), _1)
            return(0, _1)
        }
    }
    object "C_3_deployed" {
        code {
            {
                mstore(64, 128)
                revert(0, 0)
            }
        }
    }
}


======= viair_subobjects/input.sol:D =======
Binary:
6080604052341561000f57600080fd5b60cc8061001e600039806000f3fe60806040526004361061007d576000803560e01c6326121ff0141561007b573415610028578081fd5b8060031936011215610038578081fd5b6025806080016080811067ffffffffffffffff8211171561005557fe5b50806100a760803980608083f061006e573d82833e3d82fd5b508061007982610082565bf35b505b600080fd5b60405181810167ffffffffffffffff8111828210171561009e57fe5b60405291905056fe60806040523415600e57600080fd5b600980601c600039806000f3fe6080604052600080fd
Binary of the runtime part:

Optimized IR:
/*******************************************************
 *                       WARNING                       *
 *  Solidity to Yul compilation is still EXPERIMENTAL  *
 *       It can result in LOSS OF FUNDS or worse       *
 *                !USE AT YOUR OWN RISK!               *
 *******************************************************/

object "D_14" {
    code {
        {
            mstore(64, 128)
            if callvalue() { revert(0, 0) }
            let _1 := datasize("D_14_deployed")
            codecopy(0, dataoffset("D_14_deployed"), _1)
            return(0, _1)
        }
    }
    object "D_14_deployed" {
        code {
            {
                mstore(64, 128)
                if iszero(lt(calldatasize(), 4))
                {
                    let _1 := 0
                    if eq(0x26121ff0, shr(224, calldataload(_1)))
                    {
                        if callvalue() { revert(_1, _1) }
                        if slt(add(calldatasize(), not(3)), _1) { revert(_1, _1) }
                        let _2 := datasize("C_3")
                        let _3 := add(128, _2)
                        if or(gt(_3, 0xffffffffffffffff), lt(_3, 128)) { invalid() }
                        datacopy(128, dataoffset("C_3"), _2)
                        if iszero(create(_1, 128, _2))
                        {
                            returndatacopy(_1, _1, returndatasize())
                            revert(_1, returndatasize())
                        }
                        return(allocateMemory(_1), _1)
                    }
                }
                revert(0, 0)
            }
            function allocateMemory(size) -> memPtr
            {
                memPtr := mload(64)
                let newFreePtr := add(memPtr, size)
                if or(gt(newFreePtr, 0xffffffffffffffff), lt(newFreePtr, memPtr)) { invalid() }
                mstore(64, newFreePtr)
            }
        }
        object "C_3" {
            code {
                {
                    mstore(64, 128)
                    if callvalue() { revert(0, 0) }
                    let _1 := datasize("C_3_deployed")
                    codecopy(0, dataoffset("C_3_deployed"), _1)
                    return(0, _1)
                }
            }
            object "C_3_deployed" {
                code {
                    {
                        mstore(64, 128)
                        revert(0, 0)
                    }
                }
            }
        }
    }
}
